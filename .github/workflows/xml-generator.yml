name: Generate Repository XML and Upload to MinIO via Cloudflare

on:
  push:
    branches:
      - main
    paths:
      - "src/site/notes/**"
      - "*.*"
  pull_request:
    branches:
      - main
    paths:
      - "src/site/notes/**"
      - "*.*"

jobs:
  generate-and-upload:
    runs-on: ubuntu-latest

    # Змінні середовища на рівні job
    env:
      MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      MINIO_ENDPOINT_URL: https://apiminio.exodus.pp.ua

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Клонує репозиторій з усіма файлами

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl
        # Встановлює необхідні системні пакети

      - name: Install AWS CLI v2 manually
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version
        # Ручне встановлення AWS CLI v2 замість проблемної GitHub Action

      - name: Configure AWS CLI for MinIO via Cloudflare
        run: |
          aws configure set aws_access_key_id "$MINIO_ACCESS_KEY"
          aws configure set aws_secret_access_key "$MINIO_SECRET_KEY"
          aws configure set default.region us-east-1
          aws configure set default.s3.addressing_style path
        # Налаштовує AWS CLI для роботи з MinIO через Cloudflare

      - name: Generate transliteration script
        run: |
          cat > transliterate.sh << 'EOF'
          #!/bin/bash
          # Транслітерація українських назв для S3-бакетів
          transliterate() {
              local input="$1"
              # Транслітерація українських літер у латинські
              input=$(echo "$input" | sed 's/а/a/g; s/б/b/g; s/в/v/g; s/г/h/g; s/ґ/g/g; s/д/d/g; s/е/e/g; s/є/ye/g; s/ж/zh/g; s/з/z/g; s/и/y/g; s/і/i/g; s/ї/yi/g; s/й/y/g; s/к/k/g; s/л/l/g; s/м/m/g; s/н/n/g; s/о/o/g; s/п/p/g; s/р/r/g; s/с/s/g; s/т/t/g; s/у/u/g; s/ф/f/g; s/х/kh/g; s/ц/ts/g; s/ч/ch/g; s/ш/sh/g; s/щ/shch/g; s/ь//g; s/ю/yu/g; s/я/ya/g')
              input=$(echo "$input" | sed 's/А/A/g; s/Б/B/g; s/В/V/g; s/Г/H/g; s/Ґ/G/g; s/Д/D/g; s/Е/E/g; s/Є/Ye/g; s/Ж/Zh/g; s/З/Z/g; s/И/Y/g; s/І/I/g; s/Ї/Yi/g; s/Й/Y/g; s/К/K/g; s/Л/L/g; s/М/M/g; s/Н/N/g; s/О/O/g; s/П/P/g; s/Р/R/g; s/С/S/g; s/Т/T/g; s/У/U/g; s/Ф/F/g; s/Х/Kh/g; s/Ц/Ts/g; s/Ч/Ch/g; s/Ш/Sh/g; s/Щ/Shch/g; s/Ь//g; s/Ю/Yu/g; s/Я/Ya/g')
              # Заміна пробілів на дефіси та перевід у нижній регістр
              input=$(echo "$input" | sed 's/[[:space:]]\+/-/g' | tr '[:upper:]' '[:lower:]')
              # Видалення недопустимих символів для S3 bucket name
              input=$(echo "$input" | sed 's/[^a-z0-9-]//g')
              input=$(echo "$input" | sed 's/--*/-/g; s/^-//; s/-$//')
              # Перевірка довжини імені бакету (S3 вимагає 3-63 символи)
              if [ ${#input} -lt 3 ]; then
                input="${input}bucket"
              fi
              if [ ${#input} -gt 63 ]; then
                input="${input:0:63}"
              fi
              echo "$input"
          }
          transliterate "$1"
          EOF
          chmod +x transliterate.sh
        # Створює скрипт для транслітерації назв папок у валідні імена S3-бакетів

      - name: Generate XML for each topic folder
        run: |
          mkdir -p xml-outputs
          if [ ! -d "src/site/notes/" ]; then
            echo "Директорія src/site/notes/ не знайдена"
            exit 1
          fi
          
          # Перебираємо всі підпапки в src/site/notes/
          for folder in src/site/notes/*/; do
            if [ -d "$folder" ]; then
              folder_name=$(basename "$folder")
              bucket_name=$(./transliterate.sh "$folder_name")
              
              # Додаткова перевірка валідності імені бакету
              if [[ ! "$bucket_name" =~ ^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$ ]] && [[ ${#bucket_name} -ne 3 ]]; then
                echo "Некоректна назва бакету: $bucket_name для папки $folder_name"
                exit 1
              fi
              
              # Генерація XML для конкретної папки
              echo "Генерація XML для папки: $folder_name -> $bucket_name"
              npx repomix --config repomix.config.json --include "$folder/**" --output "xml-outputs/${bucket_name}.xml"
              
              # Перевірка, що файл створено і не порожній
              if [ ! -s "xml-outputs/${bucket_name}.xml" ]; then
                echo "Помилка: XML-файл для $folder_name порожній або не створений"
                exit 1
              fi
              
              echo "✓ Згенеровано ${bucket_name}.xml для папки $folder_name"
            fi
          done
        # Генерує XML-файли для кожної підпапки в src/site/notes/

      - name: Generate common XML for root files
        run: |
          # Генерація XML для файлів у корені репозиторію (не в src/site/notes/)
          echo "Генерація common.xml для кореневих файлів"
          npx repomix --config repomix.config.json --exclude "src/site/notes/**" --output "xml-outputs/common.xml"
          
          # Перевірка, що файл створено і не порожній
          if [ ! -s "xml-outputs/common.xml" ]; then
            echo "Помилка: common.xml порожній або не створений"
            exit 1
          fi
          
          echo "✓ Згенеровано common.xml"
        # Генерує XML для всіх файлів у корені репозиторію

      - name: Upload XML outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xml-outputs
          path: xml-outputs/
          retention-days: 7
        # Завантажує всі згенеровані XML-файли як артефакти для дебагу

      - name: Create buckets and upload XML files
        env:
          AWS_S3_DISABLE_MULTIPART: "1"
        shell: bash
        run: |
          echo "Створення бакетів та завантаження XML файлів до MinIO"
          
          # Створення та завантаження в бакет 'common'
          echo "Створення бакету 'common' та завантаження common.xml"
          aws --endpoint-url "$MINIO_ENDPOINT_URL" s3api create-bucket --bucket common --region us-east-1 || echo "Бакет 'common' вже існує"
          aws --endpoint-url "$MINIO_ENDPOINT_URL" \
              s3api put-object \
              --bucket common \
              --key "common.xml" \
              --body "xml-outputs/common.xml" \
              --content-type application/xml
          
          if [[ $? -ne 0 ]]; then
            echo "Помилка під час завантаження common.xml"
            exit 1
          fi
          echo "✓ Успішно завантажено: common.xml"
          
          # Створення бакетів та завантаження XML для кожної теми
          for xml_file in xml-outputs/*.xml; do
            if [ -f "$xml_file" ] && [ "$(basename "$xml_file")" != "common.xml" ]; then
              bucket_name=$(basename "$xml_file" .xml)
              
              echo "Створення бакету '$bucket_name' та завантаження ${bucket_name}.xml"
              
              # Створення бакету (якщо не існує)
              aws --endpoint-url "$MINIO_ENDPOINT_URL" s3api create-bucket --bucket "$bucket_name" --region us-east-1 || echo "Бакет '$bucket_name' вже існує"
              
              # Завантаження XML-файлу в бакет
              aws --endpoint-url "$MINIO_ENDPOINT_URL" \
                  s3api put-object \
                  --bucket "$bucket_name" \
                  --key "${bucket_name}.xml" \
                  --body "$xml_file" \
                  --content-type application/xml
              
              if [[ $? -ne 0 ]]; then
                echo "Помилка під час завантаження ${bucket_name}.xml"
                exit 1
              fi
              
              echo "✓ Успішно завантажено: ${bucket_name}.xml"
            fi
          done
          
          echo "Всі XML файли успішно завантажено в MinIO"
        # Створює бакети в MinIO та завантажує відповідні XML-файли