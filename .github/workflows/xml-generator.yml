name: Generate Repository XML and Upload to MinIO via Cloudflare

on:
  push:
    branches: [main]
    paths:
      - "src/site/notes/**"
      - "*.*"
  pull_request:
    branches: [main]
    paths:
      - "src/site/notes/**"
      - "*.*"

jobs:
  generate-and-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      MINIO_ENDPOINT_URL: https://apiminio.exodus.pp.ua
      AWS_ACCESS_KEY_ID: ${{ secrets.MINIO_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      AWS_CLI_READ_TIMEOUT: 30
      AWS_CLI_MAX_ATTEMPTS: 3

    steps:
      # –ö—Ä–æ–∫ 1: Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # –ö—Ä–æ–∫ 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # –ö—Ä–æ–∫ 3: Cache dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # –ö—Ä–æ–∫ 4: Install Node.js dependencies
      - name: Install Node.js dependencies
        run: |
          npm install -g repomix
          echo "‚úÖ repomix –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(repomix --version)"

      # –ö—Ä–æ–∫ 5: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —ñ AWS CLI
      - name: Install system dependencies and AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl bc jq libxml2-utils
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # –ö—Ä–æ–∫ 6: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AWS CLI –¥–ª—è MinIO —á–µ—Ä–µ–∑ Cloudflare
      - name: Configure AWS CLI for MinIO via Cloudflare
        run: |
          aws configure set default.region us-east-1
          aws configure set default.s3.addressing_style path
          aws configure set default.s3.signature_version s3v4

      # –ö—Ä–æ–∫ 7: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ MinIO
      - name: Verify AWS CLI credentials with MinIO
        run: |
          echo "üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ MinIO..."
          if ! aws --endpoint-url "$MINIO_ENDPOINT_URL" s3 ls; then
            echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π MinIO endpoint"
            exit 1
          fi
          echo "‚úÖ –î–æ—Å—Ç—É–ø –¥–æ MinIO –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"

      # –ö—Ä–æ–∫ 8: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è XML
      - name: Create XML validation and repair script
        run: |
          cat > validate_and_repair_xml.sh << 'EOF'
          #!/bin/bash
          
          validate_and_repair_xml() {
              local xml_file="$1"
              local temp_file="${xml_file}.tmp"
              
              echo "üîç –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: $(basename "$xml_file")"
              
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
              if [ ! -f "$xml_file" ]; then
                  echo "‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $xml_file"
                  return 1
              fi
              
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
              if [ ! -s "$xml_file" ]; then
                  echo "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª, —Å—Ç–≤–æ—Ä—é—î–º–æ –≤–∞–ª—ñ–¥–Ω–∏–π XML placeholder"
                  cat > "$xml_file" << 'XMLEOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <repository>
              <metadata>
                  <status>empty</status>
                  <message>No content found</message>
              </metadata>
          </repository>
          XMLEOF
                  return 0
              fi
              
              # –°–ø—Ä–æ–±—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
              if xmllint --noout "$xml_file" 2>/dev/null; then
                  echo "‚úÖ XML –≤–∂–µ –≤–∞–ª—ñ–¥–Ω–∏–π: $(basename "$xml_file")"
                  return 0
              fi
              
              echo "üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è XML —Ñ–∞–π–ª—É..."
              
              # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏
              cp "$xml_file" "$temp_file"
              
              # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ XML
              sed -i 's/&/\&amp;/g' "$temp_file"          # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è &
              sed -i 's/</\&lt;/g' "$temp_file"           # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è < (–∫—Ä—ñ–º XML —Ç–µ–≥—ñ–≤)
              sed -i 's/>/\&gt;/g' "$temp_file"           # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è > (–∫—Ä—ñ–º XML —Ç–µ–≥—ñ–≤)
              sed -i 's/"/\&quot;/g' "$temp_file"         # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è "
              sed -i "s/'/\&apos;/g" "$temp_file"         # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è '
              
              # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ XML —Ç–µ–≥–∏
              sed -i 's/\&lt;\([^&]*\)\&gt;/<\1>/g' "$temp_file"
              
              # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
              sed -i 's/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]//g' "$temp_file"
              
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î XML –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—è
              if ! head -n 1 "$temp_file" | grep -q "<?xml"; then
                  echo '<?xml version="1.0" encoding="UTF-8"?>' > "$xml_file"
                  cat "$temp_file" >> "$xml_file"
                  cp "$xml_file" "$temp_file"
              fi
              
              # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±–≥–æ—Ä—Ç–∫—É
              if ! xmllint --noout "$temp_file" 2>/dev/null; then
                  echo "üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–≥–æ—Ä—Ç–∫–∏ –¥–ª—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É..."
                  cat > "$xml_file" << 'XMLEOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <repository>
              <metadata>
                  <status>repaired</status>
                  <message>Content was wrapped due to XML validation issues</message>
              </metadata>
              <content><![CDATA[
          XMLEOF
                  cat "$temp_file" >> "$xml_file"
                  cat >> "$xml_file" << 'XMLEOF'
          ]]></content>
          </repository>
          XMLEOF
              else
                  mv "$temp_file" "$xml_file"
              fi
              
              # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
              if xmllint --noout "$xml_file" 2>/dev/null; then
                  echo "‚úÖ XML —É—Å–ø—ñ—à–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: $(basename "$xml_file")"
                  rm -f "$temp_file"
                  return 0
              else
                  echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ XML: $(basename "$xml_file")"
                  rm -f "$temp_file"
                  return 1
              fi
          }
          
          validate_and_repair_xml "$1"
          EOF
          
          chmod +x validate_and_repair_xml.sh
          echo "‚úÖ –°–∫—Ä–∏–ø—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó XML —Å—Ç–≤–æ—Ä–µ–Ω–æ"

      # –ö—Ä–æ–∫ 9: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ø–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
      - name: Create repomix configuration
        run: |
          cat > repomix.config.json << 'EOF'
          {
            "output": {
              "filePath": "repository.xml",
              "style": "xml"
            },
            "include": ["**/*.md"],
            "ignore": {
              "paths": [
                "node_modules/**",
                ".git/**",
                "*.log",
                ".github/**",
                "dist/**",
                "build/**"
              ]
            }
          }
          EOF
          echo "‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è repomix —Å—Ç–≤–æ—Ä–µ–Ω–∞"

      # –ö—Ä–æ–∫ 10: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
      - name: Generate improved transliteration script
        run: |
          cat > transliterate.sh << 'EOF'
          #!/bin/bash
          transliterate() {
              local input="$1"
              # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è
              input=$(echo "$input" | sed 's/–∞/a/g; s/–±/b/g; s/–≤/v/g; s/–≥/h/g; s/“ë/g/g; s/–¥/d/g; s/–µ/e/g; s/—î/ye/g; s/–∂/zh/g; s/–∑/z/g; s/–∏/y/g; s/—ñ/i/g; s/—ó/yi/g; s/–π/y/g; s/–∫/k/g; s/–ª/l/g; s/–º/m/g; s/–Ω/n/g; s/–æ/o/g; s/–ø/p/g; s/—Ä/r/g; s/—Å/s/g; s/—Ç/t/g; s/—É/u/g; s/—Ñ/f/g; s/—Ö/kh/g; s/—Ü/ts/g; s/—á/ch/g; s/—à/sh/g; s/—â/shch/g; s/—å//g; s/—é/yu/g; s/—è/ya/g')
              input=$(echo "$input" | sed 's/–ê/A/g; s/–ë/B/g; s/–í/V/g; s/–ì/H/g; s/“ê/G/g; s/–î/D/g; s/–ï/E/g; s/–Ñ/Ye/g; s/–ñ/Zh/g; s/–ó/Z/g; s/–ò/Y/g; s/–Ü/I/g; s/–á/Yi/g; s/–ô/Y/g; s/–ö/K/g; s/–õ/L/g; s/–ú/M/g; s/–ù/N/g; s/–û/O/g; s/–ü/P/g; s/–†/R/g; s/–°/S/g; s/–¢/T/g; s/–£/U/g; s/–§/F/g; s/–•/Kh/g; s/–¶/Ts/g; s/–ß/Ch/g; s/–®/Sh/g; s/–©/Shch/g; s/–¨//g; s/–Æ/Yu/g; s/–Ø/Ya/g')
              # –ó–∞–º—ñ–Ω–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤ –Ω–∞ –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
              input=$(echo "$input" | sed 's/[[:space:]]\+/-/g' | tr '[:upper:]' '[:lower:]')
              # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
              input=$(echo "$input" | sed 's/[^a-z0-9._-]//g' | sed 's/--*/-/g; s/^-//; s/-$//')
              # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–æ–≤–∂–∏–Ω–∏ –¥–ª—è S3 bucket names
              if [ ${#input} -lt 3 ]; then input="${input}bucket"; fi
              if [ ${#input} -gt 63 ]; then input="${input:0:63}"; fi
              # –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–µ—Ñ—ñ—Å—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –≤ –∫—ñ–Ω—Ü—ñ –ø—ñ—Å–ª—è –æ–±—Ä—ñ–∑–∫–∏
              input=$(echo "$input" | sed 's/^-//; s/-$//')
              echo "$input"
          }
          transliterate "$1"
          EOF
          chmod +x transliterate.sh
          echo "‚úÖ –°–∫—Ä–∏–ø—Ç —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ"

      # –ö—Ä–æ–∫ 11: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è XML —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞–ø–∫–∏ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º
      - name: Generate XML files for each folder
        run: |
          mkdir -p xml-outputs
          if [ ! -d "src/site/notes/" ]; then 
            echo "‚ùå –ü–∞–ø–∫–∞ src/site/notes/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
            exit 1
          fi
          
          folder_count=0
          for folder in src/site/notes/*/; do
            if [ -d "$folder" ]; then
              folder_name=$(basename "$folder")
              bucket_name=$(./transliterate.sh "$folder_name")
              
              echo "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è XML –¥–ª—è –ø–∞–ø–∫–∏: $folder_name (–±–∞–∫–µ—Ç: $bucket_name)"
              
              file_count=$(find "$folder" -name "*.md" -type f | wc -l)
              echo "üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: $file_count"
              
              if [ "$file_count" -gt 0 ]; then
                # Create temporary config for this folder
                cat > "temp_config_${bucket_name}.json" << EOF
          {
            "output": {
              "filePath": "xml-outputs/${bucket_name}.xml",
              "style": "xml"
            },
            "include": ["${folder}**/*.md"],
            "ignore": {
              "paths": [
                "node_modules/**",
                ".git/**",
                "*.log",
                ".github/**",
                "dist/**",
                "build/**"
              ]
            }
          }
          EOF
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ XML –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
                if repomix --config "temp_config_${bucket_name}.json"; then
                  echo "‚úÖ repomix —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è ${bucket_name}"
                else
                  echo "‚ö†Ô∏è repomix –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é –¥–ª—è ${bucket_name}, —Å—Ç–≤–æ—Ä—é—î–º–æ fallback"
                  cat > "xml-outputs/${bucket_name}.xml" << 'PLACEHOLDER'
          <?xml version="1.0" encoding="UTF-8"?>
          <repository>
            <metadata>
              <status>fallback</status>
              <message>Generated fallback due to repomix error</message>
            </metadata>
          </repository>
          PLACEHOLDER
                fi
                
                rm "temp_config_${bucket_name}.json"
                
                # –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ XML
                ./validate_and_repair_xml.sh "xml-outputs/${bucket_name}.xml"
                
                folder_count=$((folder_count + 1))
              else
                echo "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è –ø–∞–ø–∫–∞: $folder_name - —Å—Ç–≤–æ—Ä—é—î–º–æ placeholder"
                cat > "xml-outputs/${bucket_name}.xml" << 'PLACEHOLDER'
          <?xml version="1.0" encoding="UTF-8"?>
          <repository>
            <metadata>
              <status>empty</status>
              <message>No markdown files found in this folder</message>
            </metadata>
          </repository>
          PLACEHOLDER
                folder_count=$((folder_count + 1))
              fi
              echo "---"
            fi
          done
          
          echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó XML:"
          echo "- –û–±—Ä–æ–±–ª–µ–Ω–æ –ø–∞–ø–æ–∫: $folder_count"
          echo "- –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ XML —Ñ–∞–π–ª—ñ–≤: $(find xml-outputs -name '*.xml' | wc -l)"

      # –ö—Ä–æ–∫ 12: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è common.xml –¥–ª—è –∫–æ—Ä–µ–Ω–µ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
      - name: Generate common.xml for root files
        run: |
          echo "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è common.xml –¥–ª—è –∫–æ—Ä–µ–Ω–µ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"
          
          # Create temporary config for common files
          cat > "temp_config_common.json" << 'EOF'
          {
            "output": {
              "filePath": "xml-outputs/common.xml",
              "style": "xml"
            },
            "include": ["**/*.md"],
            "ignore": {
              "paths": [
                "src/site/notes/**",
                "node_modules/**",
                ".git/**",
                "*.log",
                ".github/**",
                "dist/**",
                "build/**"
              ]
            }
          }
          EOF
          
          # –ì–µ–Ω–µ—Ä—É—î–º–æ common.xml –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
          if repomix --config "temp_config_common.json"; then
            echo "‚úÖ repomix —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è common.xml"
          else
            echo "‚ö†Ô∏è repomix –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é –¥–ª—è common.xml, —Å—Ç–≤–æ—Ä—é—î–º–æ fallback"
            cat > "xml-outputs/common.xml" << 'PLACEHOLDER'
          <?xml version="1.0" encoding="UTF-8"?>
          <repository>
            <metadata>
              <status>fallback</status>
              <message>Generated fallback due to repomix error</message>
            </metadata>
          </repository>
          PLACEHOLDER
          fi
          
          rm "temp_config_common.json"
          
          # –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ common.xml
          ./validate_and_repair_xml.sh "xml-outputs/common.xml"
          
          echo "‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: common.xml"

      # –ö—Ä–æ–∫ 13: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è XML —Ñ–∞–π–ª—ñ–≤
      - name: Final XML validation
        run: |
          echo "üîç –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è XML —Ñ–∞–π–ª—ñ–≤..."
          xml_valid=true
          for xml_file in xml-outputs/*.xml; do
            if xmllint --noout "$xml_file" 2>/dev/null; then
              echo "‚úÖ –í–∞–ª—ñ–¥–Ω–∏–π XML: $(basename "$xml_file")"
            else
              echo "‚ùå –í—Å–µ —â–µ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π XML: $xml_file"
              echo "üîç –ü–µ—Ä—à—ñ 10 —Ä—è–¥–∫—ñ–≤ —Ñ–∞–π–ª—É:"
              head -n 10 "$xml_file"
              xml_valid=false
            fi
          done
          
          if [ "$xml_valid" = false ]; then
            echo "‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ XML —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è —Å–ø—Ä–æ–± –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"
            echo "‚ö†Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—è–≤–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏..."
            # –ù–µ –≤–∏—Ö–æ–¥–∏–º–æ –∑ –ø–æ–º–∏–ª–∫–æ—é, —â–æ–± –ø—Ä–æ—Ü–µ—Å –ø—Ä–æ–¥–æ–≤–∂–∏–≤—Å—è
          else
            echo "‚úÖ –í—Å—ñ XML —Ñ–∞–π–ª–∏ –≤–∞–ª—ñ–¥–Ω—ñ"
          fi

      # –ö—Ä–æ–∫ 14: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫
      - name: Generate metrics
        run: |
          echo "üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
          echo "- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–ø–æ–∫: $(find src/site/notes -type d -mindepth 1 -maxdepth 1 | wc -l)"
          echo "- –ö—ñ–ª—å–∫—ñ—Å—Ç—å XML —Ñ–∞–π–ª—ñ–≤: $(find xml-outputs -name '*.xml' | wc -l)"
          echo "- –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä XML: $(du -sh xml-outputs/ | cut -f1)"
          echo ""
          echo "üìÑ –†–æ–∑–º—ñ—Ä–∏ —Ñ–∞–π–ª—ñ–≤:"
          for xml_file in xml-outputs/*.xml; do
            size=$(wc -c < "$xml_file" | tr -d ' ')
            echo "  - $(basename "$xml_file"): $size –±–∞–π—Ç"
          done

      # –ö—Ä–æ–∫ 15: Upload XML outputs as artifacts
      - name: Upload XML outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xml-outputs
          path: xml-outputs/
          retention-days: 7

      # –ö—Ä–æ–∫ 16: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è MinIO Client
      - name: Install MinIO Client
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/
          echo "‚úÖ MinIO Client –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(mc --version)"

      # –ö—Ä–æ–∫ 17: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è MinIO Client
      - name: Configure MinIO Client
        run: |
          mc alias set minio "$MINIO_ENDPOINT_URL" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" --api S3v4
          echo "‚úÖ MinIO Client –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"

      # –ö—Ä–æ–∫ 18: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–∫–µ—Ç—ñ–≤
      - name: Synchronize buckets (delete obsolete ones)
        run: |
          echo "üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –±–∞–∫–µ—Ç—ñ–≤..."
          
          declare -a EXPECTED_BUCKETS
          for folder in src/site/notes/*/; do
            if [ -d "$folder" ]; then
              folder_name=$(basename "$folder")
              bucket_name=$(./transliterate.sh "$folder_name")
              EXPECTED_BUCKETS+=("$bucket_name")
            fi
          done
          EXPECTED_BUCKETS+=("common")
          
          echo "‚úÖ –û—á—ñ–∫—É–≤–∞–Ω—ñ –±–∞–∫–µ—Ç–∏ –∑–≥—ñ–¥–Ω–æ –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º (${#EXPECTED_BUCKETS[@]}): ${EXPECTED_BUCKETS[*]}"

          # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ—Å–Ω—É—é—á–∏—Ö –±–∞–∫–µ—Ç—ñ–≤ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
          if ! ACTUAL_BUCKETS=($(mc ls minio/ 2>/dev/null | awk '{print $NF}' | sed 's|/||' || true)); then
            echo "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –±–∞–∫–µ—Ç—ñ–≤ –∞–±–æ –±–∞–∫–µ—Ç—ñ–≤ –Ω–µ–º–∞—î"
            ACTUAL_BUCKETS=()
          fi
          
          echo "üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –±–∞–∫–µ—Ç–∏ –Ω–∞ MinIO (${#ACTUAL_BUCKETS[@]}): ${ACTUAL_BUCKETS[*]}"

          deleted_count=0
          for bucket in "${ACTUAL_BUCKETS[@]}"; do
            if [[ ! " ${EXPECTED_BUCKETS[*]} " =~ " ${bucket} " ]]; then
              echo "üóëÔ∏è –ë–∞–∫–µ—Ç '$bucket' —î –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º —ñ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π."
              if mc rb --force "minio/$bucket" 2>/dev/null; then
                echo "‚úÖ –ë–∞–∫–µ—Ç '$bucket' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ."
                deleted_count=$((deleted_count + 1))
              else
                echo "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–∫–µ—Ç–∞ '$bucket'"
              fi
            else
              echo "üëç –ë–∞–∫–µ—Ç '$bucket' –∞–∫—Ç—É–∞–ª—å–Ω–∏–π, –∑–∞–ª–∏—à–∞—î–º–æ."
            fi
          done

          echo "üéâ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –±–∞–∫–µ—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–æ: $deleted_count"
      
      # –ö—Ä–æ–∫ 19: –ü–æ–∫—Ä–∞—â–µ–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML-—Ñ–∞–π–ª—ñ–≤
      - name: Upload XML files with MinIO Client
        run: |
          upload_count=0
          for xml_file in xml-outputs/*.xml; do
            bucket_name=$(basename "$xml_file" .xml)
            file_size=$(wc -c < "$xml_file" | tr -d ' ')
            
            echo "üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: $xml_file -> minio/$bucket_name/"
            echo "üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: $file_size –±–∞–π—Ç"
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∫–µ—Ç —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            if mc mb -q --ignore-existing "minio/$bucket_name"; then
              echo "‚úÖ –ë–∞–∫–µ—Ç '$bucket_name' –≥–æ—Ç–æ–≤–∏–π"
            else
              echo "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –±–∞–∫–µ—Ç–∞ '$bucket_name'"
            fi
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –∑ retry –ª–æ–≥—ñ–∫–æ—é
            upload_success=false
            for attempt in {1..3}; do
              echo "üîÑ –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è $attempt –∑ 3..."
              if mc cp "$xml_file" "minio/$bucket_name/${bucket_name}.xml"; then
                upload_success=true
                break
              else
                echo "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —Å–ø—Ä–æ–±–∞ $attempt"
                if [ "$attempt" -lt 3 ]; then
                  echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Å–µ–∫—É–Ω–¥..."
                  sleep 5
                fi
              fi
            done
            
            if [ "$upload_success" = true ]; then
              echo "‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${bucket_name}.xml"
              upload_count=$((upload_count + 1))
            else
              echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: ${bucket_name}.xml"
              exit 1
            fi
            
            echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó (3 —Å–µ–∫—É–Ω–¥–∏)..."
            sleep 3
            echo "---"
          done
          
          echo "üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: $upload_count"

      # –ö—Ä–æ–∫ 20: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      - name: Verify uploaded files with enhanced retry logic
        run: |
          verification_success=true
          for xml_file in xml-outputs/*.xml; do
            bucket_name=$(basename "$xml_file" .xml)
            local_size=$(wc -c < "$xml_file" | tr -d ' ')
            
            echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É: ${bucket_name}.xml"
            echo "üìä –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: $local_size –±–∞–π—Ç"
            
            remote_bytes=""
            verification_attempts=0
            max_attempts=5
            
            while [ $verification_attempts -lt $max_attempts ]; do
              verification_attempts=$((verification_attempts + 1))
              echo "üîÑ –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ $verification_attempts –∑ $max_attempts..."
              
              if stat_output=$(mc stat --json "minio/$bucket_name/${bucket_name}.xml" 2>/dev/null); then
                if remote_bytes=$(echo "$stat_output" | jq -r '.size' 2>/dev/null); then
                  if [ -n "$remote_bytes" ] && [ "$remote_bytes" != "null" ] && [ "$remote_bytes" -gt 0 ]; then
                    echo "üìä –†–æ–∑–º—ñ—Ä –Ω–∞ MinIO: $remote_bytes –±–∞–π—Ç"
                    break
                  fi
                fi
              fi
              
              echo "‚ö†Ô∏è –°–ø—Ä–æ–±–∞ $verification_attempts –Ω–µ –≤–¥–∞–ª–∞—Å—è"
              if [ $verification_attempts -lt $max_attempts ]; then
                echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Å–µ–∫—É–Ω–¥..."
                sleep 5
              fi
            done
            
            if [ -z "$remote_bytes" ] || [ "$remote_bytes" = "0" ] || [ "$remote_bytes" = "null" ]; then
              echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –ø—ñ—Å–ª—è $max_attempts —Å–ø—Ä–æ–±"
              verification_success=false
              continue
            fi
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∑ –¥–æ–ø—É—Å–∫–æ–º 1%
            threshold=$(echo "scale=0; $local_size / 100" | bc)
            if [ "$threshold" -lt 10 ]; then threshold=10; fi
            
            diff=$(echo "$local_size - $remote_bytes" | bc)
            abs_diff=${diff#-}
            
            if [ $(echo "$abs_diff <= $threshold" | bc -l) -eq 1 ]; then
              echo "‚úÖ –†–æ–∑–º—ñ—Ä–∏ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å (–¥–æ–ø—É—Å–∫ ¬±$threshold –±–∞–π—Ç)"
            else
              echo "‚ùå –†–æ–∑–º—ñ—Ä–∏ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!"
              echo "üìä –õ–æ–∫–∞–ª—å–Ω–∏–π: $local_size –±–∞–π—Ç"
              echo "üìä –í—ñ–¥–¥–∞–ª–µ–Ω–∏–π: $remote_bytes –±–∞–π—Ç"
              echo "üîç –†—ñ–∑–Ω–∏—Ü—è: $diff –±–∞–π—Ç"
              verification_success=false
            fi
            echo "---"
          done
          
          if [ "$verification_success" = true ]; then
            echo "üéâ –í—Å—ñ —Ñ–∞–π–ª–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ!"
          else
            echo "‚ùå –ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ñ–∞–π–ª—ñ–≤"
            exit 1
          fi

      # –ö—Ä–æ–∫ 21: –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–≤—ñ—Ç
      - name: Final verification and report
        run: |
          echo "üìã –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç:"
          echo "================="
          
          total_buckets=0
          total_size=0
          
          for xml_file in xml-outputs/*.xml; do
            bucket_name=$(basename "$xml_file" .xml)
            local_size=$(wc -c < "$xml_file" | tr -d ' ')
            
            echo "üóÇÔ∏è –ë–∞–∫–µ—Ç: $bucket_name"
            echo "   üìä –†–æ–∑–º—ñ—Ä: $local_size –±–∞–π—Ç"
            
            if mc ls "minio/$bucket_name/" >/dev/null 2>&1; then
              echo "   ‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
              total_buckets=$((total_buckets + 1))
              total_size=$((total_size + local_size))
            else
              echo "   ‚ùå –°—Ç–∞—Ç—É—Å: –ü–æ–º–∏–ª–∫–∞"
            fi
            echo "   ---"
          done
          
          echo "üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
          echo "   - –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –±–∞–∫–µ—Ç—ñ–≤: $total_buckets"
          echo "   - –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: $total_size –±–∞–π—Ç"
          echo "   - –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: $((total_size / total_buckets)) –±–∞–π—Ç"
          echo ""
          echo "üéØ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"

      # –ö—Ä–æ–∫ 22: Cleanup
      - name: Cleanup temporary files
        if: always()
        run: |
          echo "üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤..."
          rm -f awscliv2.zip
          rm -f transliterate.sh
          rm -f validate_and_repair_xml.sh
          rm -f temp_config_*.json
          echo "‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"