{
    "name": "Generate PDF and Update Noco-DB",
    "on": {
        "push": {
            "branches": [
                "main"
            ],
            "paths": [
                "src/site/notes/**"
            ]
        },
        "pull_request": {
            "branches": [
                "main"
            ],
            "paths": [
                "src/site/notes/**"
            ]
        }
    },
    "jobs": {
        "generate-and-update-pdf": {
            "runs-on": "ubuntu-latest",
            "steps": [
                {
                    "name": "Checkout repository",
                    "uses": "actions/checkout@v4"
                },
                {
                    "name": "Install system dependencies",
                    "run": "sudo apt-get update\nsudo apt-get install -y libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info"
                },
                {
                    "name": "Set up Python",
                    "uses": "actions/setup-python@v5",
                    "with": {
                        "python-version": "3.x"
                    }
                },
                {
                    "name": "Install Python dependencies",
                    "run": "python -m pip install --upgrade pip\npip install markdown weasyprint beautifulsoup4"
                },
                {
                    "name": "Generate PDFs per topic",
                    "run": "printf 'src/site/notes\\n\\n\\n' | python codetomd.py"
                },
                {
                    "name": "Update PDF records in Noco-DB",
                    "env": {
                        "NOCO_DB_API_URL": "https://nocodb.soyka.pp.ua",
                        "NOCO_DB_TABLE_ID": "m3plh50uwtk34zd",
                        "NOCO_DB_API_TOKEN": "${{ secrets.NOCO_DB_API_KEY }}"
                    },
                    "run": "echo 'Processing PDF files for Noco-DB update...'\nfor pdf in src/site/notes/*.pdf; do\nfilename=$(basename \"$pdf\")\necho 'Processing file: $filename'\nrecords=$(curl -s --request GET --url \"$NOCO_DB_API_URL/api/v2/tables/$NOCO_DB_TABLE_ID/records\" --header 'xc-token: $NOCO_DB_API_TOKEN')\nrecord=$(python3 -c \"import json, sys\nrecords = json.loads(sys.stdin.read())\nfor item in records.get('data', []):\n    if item.get('filename') == sys.argv[1]:\n        print(json.dumps(item))\n        break\n\" \"$filename\" <<< \"$records\")\nif [ -z \"$record\" ]; then\necho 'Record for $filename not found. Creating a new record...'\nresponse=$(curl --request POST --url \"$NOCO_DB_API_URL/api/v2/tables/$NOCO_DB_TABLE_ID/records\" --header 'xc-token: $NOCO_DB_API_TOKEN' -F \"filename=$filename\" -F \"file=@$pdf\")\necho 'Response: $response'\nelse\nrecordId=$(echo \"$record\" | python3 -c \"import json, sys; print(json.load(sys.stdin)['id'])\")\nif [ \"$recordId\" != \"null\" ]; then\necho 'Record for $filename exists (ID: $recordId). Updating the record...'\nresponse=$(curl --request PATCH --url \"$NOCO_DB_API_URL/api/v2/tables/$NOCO_DB_TABLE_ID/records/$recordId\" --header 'xc-token: $NOCO_DB_API_TOKEN' -F \"filename=$filename\" -F \"file=@$pdf\")\necho 'Response: $response'\nelse\necho 'Error: Failed to fetch valid record ID for $filename'\nfi\nfi\ndone"
                }
            ]
        }
    }
}
