name: Generate PDF and Update Noco-DB

on:
  push:
    branches:
      - main
    paths:
      - "src/site/notes/**"
  pull_request:
    branches:
      - main
    paths:
      - "src/site/notes/**"

jobs:
  generate-and-update-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf2.0-0 \
            libffi-dev \
            shared-mime-info \
            jq

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install markdown weasyprint beautifulsoup4

      - name: Generate PDFs per topic
        run: |
          printf "src/site/notes\n\n\n" | python codetomd.py

      - name: Update PDF records in Noco-DB
        env:
          NOCO_DB_API_URL: "https://nocodb.soyka.pp.ua"
          NOCO_DB_TABLE_ID: "mdb4f2t1ngchrom"
          NOCO_DB_VIEW_ID: "vwknikxbrl1mobu9"
          NOCO_DB_API_TOKEN: ${{ secrets.NOCO_DB_API_KEY }}
          ATTACHMENT_FIELD_ID: "cyl3kusky2kreq3"
        run: |
          echo "Processing PDF files for Noco-DB update..."

          for pdf in src/site/notes/*.pdf; do
            # Get original filename without path and extension
            original_name=`${(basename "}$`pdf" .pdf)

            # Convert filename to URL-safe format using Python
            filename=$(python3 -c "
import sys
import re
import unicodedata

def slugify(text):
    # Convert to lowercase and normalize unicode characters
    text = text.lower()
    text = unicodedata.normalize('NFKD', text)

    # Replace cyrillic characters with latin equivalents
    transliteration = {
        'а': 'a', 'б': 'b', 'в': 'v', 'г': 'h', 'ґ': 'g', 'д': 'd', 'е': 'e',
        'є': 'ie', 'ж': 'zh', 'з': 'z', 'и': 'y', 'і': 'i', 'ї': 'i', 'й': 'i',
        'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r',
        'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'kh', 'ц': 'ts', 'ч': 'ch',
        'ш': 'sh', 'щ': 'shch', 'ь': '', 'ю': 'iu', 'я': 'ia'
    }

    result = ''
    for char in text:
        if char in transliteration:
            result += transliteration[char]
        else:
            result += char

    # Replace any non-alphanumeric characters with hyphen
    result = re.sub(r'[^a-z0-9]+', '-', result)

    # Remove leading/trailing hyphens
    result = result.strip('-')

    return result

print(slugify(sys.argv[1]))
" "$original_name")

            echo "Original name: `${original_name, Transliterated name:}$`filename"

            # URL encode the where parameter
            where=`${(python3 -c "import urllib.parse; print(urllib.parse.quote('filename,eq,' + '}$`filename'))")

            # Check if record exists
            response=$(curl -s -w "%{http_code}" \
              --url "`${NOCO_DB_API_URL/api/v2/tables/}$`NOCO_DB_TABLE_ID/records?where=`${where&offset=0&limit=25&viewId=}$`NOCO_DB_VIEW_ID" \
              --header "xc-token: $NOCO_DB_API_TOKEN")

            http_code=${response: -3}
            response_body=`${{response:0:}$`{#response}-3}

            if [ "$http_code" != "200" ]; then
              echo "Error checking record existence: HTTP $http_code"
              continue
            fi

            if echo "$response_body" | jq -e '.data | length == 0' > /dev/null; then
              echo "Creating new record for $filename..."

              attempt=0
              max_attempts=3
              success=false

              while [ `${attempt -lt}$`max_attempts ] && [ "$success" = false ]; do
                response=$(curl -s -w "%{http_code}" \
                  --url "`${NOCO_DB_API_URL/api/v2/tables/}$`NOCO_DB_TABLE_ID/records" \
                  --header "xc-token: $NOCO_DB_API_TOKEN" \
                  --header "Content-Type: multipart/form-data" \
                  -F "filename=$filename" \
                  -F "`${ATTACHMENT_FIELD_ID=@}$`pdf;filename=$filename.pdf")

                http_code=${response: -3}

                if [ "`${http_code" = "200" ] || [ "}$`http_code" = "201" ]; then
                  echo "Successfully created record for $filename"
                  success=true
                else
                  attempt=$((attempt+1))
                  echo "Attempt `${attempt failed with HTTP}$`http_code. Retrying in 20 seconds..."
                  sleep 20
                fi
              done

              if [ "$success" = false ]; then
                echo "Failed to create record for `${filename after}$`max_attempts attempts"
              fi
            else
              recordId=`${(echo "}$`response_body" | jq -r '.data[0].id')

              if [[ "$recordId" == "null" ]]; then
                echo "Error: recordId is missing, skipping $filename"
                continue
              fi

              echo "Updating existing record `${recordId for}$`filename..."

              attempt=0
              max_attempts=3
              success=false

              while [ `${attempt -lt}$`max_attempts ] && [ "$success" = false ]; do
                response=$(curl -s -w "%{http_code}" \
                  --url "`${NOCO_DB_API_URL/api/v2/tables/}$`NOCO_DB_TABLE_ID/records/$recordId" \
                  --header "xc-token: $NOCO_DB_API_TOKEN" \
                  --header "Content-Type: multipart/form-data" \
                  -F "filename=$filename" \
                  -F "`${ATTACHMENT_FIELD_ID=@}$`pdf;filename=$filename.pdf")

                http_code=${response: -3}

                if [ "$http_code" = "200" ]; then
                  echo "Successfully updated record for $filename"
                  success=true
                else
                  attempt=$((attempt+1))
                  echo "Attempt `${attempt failed with HTTP}$`http_code. Retrying in 20 seconds..."
                  sleep 20
                fi
              done

              if [ "$success" = false ]; then
                echo "Failed to update record for `${filename after}$`max_attempts attempts"
              fi
            fi
          done
