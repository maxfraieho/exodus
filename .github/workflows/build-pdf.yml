name: Generate PDF and Update Noco-DB

on:
  push:
    branches:
      - main
    paths:
      - "src/site/notes/**"
  pull_request:
    branches:
      - main
    paths:
      - "src/site/notes/**"

jobs:
  generate-and-update-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf2.0-0 \
            libffi-dev \
            shared-mime-info \
            jq

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install markdown weasyprint beautifulsoup4

      - name: Generate PDFs per topic
        run: |
          printf "src/site/notes\n\n\n" | python codetomd.py

      - name: Update PDF records in Noco-DB
        env:
          # Дані для доступу
          NOCO_DB_API_URL: "https://nocodb.soyka.pp.ua"
          NOCO_DB_TABLE_ID: "mo1skyako59jzjh"      # <-- Замість колишніх mdb4f2t1ngchrom тощо
          NOCO_DB_VIEW_ID: "vw2u02w5djy06gxg"      # <-- Вказаний у документації
          NOCO_DB_API_TOKEN: ${{ secrets.NOCO_DB_API_KEY }}
        run: |
          echo "Закидаємо PDF files for Noco-DB update..."

          for pdf in src/site/notes/*.pdf; do
            # 1) Оригінальна назва файлу
            original_name=$(basename "$pdf")

            # 2) Транслітерація кирилиці (включно з українськими літерами) в латиницю
            translit_name=$(echo "$original_name" | sed '
              y/абвгґдеєжзиіїйклмнопрстуфхцчшщюяьАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЮЯЬ/abvhgdeyezhzyiijklmnoprstufxczchshshchyuyaABVHGDEYeZhZYIIJKLmnoprstufxczchshshchYUYa/;
              s/ё/yo/g; s/ъ//g; s/ы/y/g; s/э/e/g; s/Ё/Yo/g; s/Ъ//g; s/Ы/Y/g; s/Э/E/g;
            ' | iconv -f UTF-8 -t ASCII//TRANSLIT//IGNORE | tr -cd '[:alnum:]._-' | tr ' ' '_')

            echo "Оригінальне ім'я: $original_name, транслітероване ім'я: $translit_name"
            
            # 3) Формуємо параметр where=(Title,eq,<translit_name>)
            where=$(python3 -c "import urllib.parse, sys; q=f'(Title,eq,{sys.argv[1]})'; print(urllib.parse.quote(q))" "$translit_name")

            # 4) Шукаємо запис з Title == translit_name
            #    Згідно з документацією, повертається JSON із ключем "list", а не "data".
            response=$(curl -s --request GET \
              --url "$NOCO_DB_API_URL/api/v2/tables/$NOCO_DB_TABLE_ID/records?where=$where&offset=0&limit=25&viewId=$NOCO_DB_VIEW_ID" \
              --header "xc-token: $NOCO_DB_API_TOKEN")

            # 5) Перевіряємо, чи є записи (list порожній чи ні)
            record_count=$(echo "$response" | jq '.list | length')

            if [ "$record_count" -eq 0 ]; then
              echo "Створення нового запису для Title='$translit_name'..."
              
              attempt=0
              max_attempts=3

              while [ $attempt -lt $max_attempts ]; do
                # Виконуємо POST (Index create):
                # - Показуємо NocoDB, що ключ поля з назвою "Title"
                # - Файл прикріплюємо до поля "Attachment"
                #
                # У multipart можна передати як:
                # -F "Title=<тут назва>"
                # -F "Attachment=@<шлях_до_файлу>;filename=<видима_назва>"
                #
                # Зверніть увагу: "filename=<translit_name>" вплине на те,
                # як NocoDB бачитиме прикріплену вкладку в UI (не кирилиця).
                
                response=$(curl --silent --show-error --fail --request POST \
                  --url "$NOCO_DB_API_URL/api/v2/tables/$NOCO_DB_TABLE_ID/records" \
                  --header "xc-token: $NOCO_DB_API_TOKEN" \
                  -F "Title=$translit_name" \
                  -F "Attachment=@$pdf;filename=$translit_name")

                if [[ $? -eq 0 ]]; then
                  echo "Успішно створено запис (Title='$translit_name')"
                  break
                fi

                attempt=$((attempt+1))
                echo "Повторна спроба створення... ($attempt/$max_attempts)"
                sleep 20
              done

            else
              # Якщо запис існує, беремо Id першого з масиву list
              recordId=$(echo "$response" | jq -r '.list[0].Id')

              if [[ "$recordId" == "null" || -z "$recordId" ]]; then
                echo "Помилка: recordId відсутній, пропускаємо $translit_name"
                continue
              fi
              
              echo "Оновлення існуючого запису (Id=$recordId, Title='$translit_name')..."

              attempt=0
              max_attempts=3

              while [ $attempt -lt $max_attempts ]; do
                # Виконуємо PATCH (Index update):
                # Тут також передаємо "Title" та "Attachment", щоб оновити вкладення.
                
                response=$(curl --silent --show-error --fail --request PATCH \
                  --url "$NOCO_DB_API_URL/api/v2/tables/$NOCO_DB_TABLE_ID/records/$recordId" \
                  --header "xc-token: $NOCO_DB_API_TOKEN" \
                  -F "Title=$translit_name" \
                  -F "Attachment=@$pdf;filename=$translit_name")

                if [[ $? -eq 0 ]]; then
                  echo "Успішно оновлено запис (Id=$recordId)"
                  break
                fi

                attempt=$((attempt+1))
                echo "Повторна спроба оновлення... ($attempt/$max_attempts)"
                sleep 20
              done
            fi
          done